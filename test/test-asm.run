IJVM Trace of test-asm.bc Mon Sep 27 17:19:54 1999

                                stack = 0, 0, 0, 0, 3
bipush 12           [10 0c]     stack = 12, 0, 0, 0, 0, 3
bipush 0            [10 00]     stack = 0, 12, 0, 0, 0, 0, 3
bipush -7           [10 f9]     stack = -7, 0, 12, 0, 0, 0, 0, 3
bipush 127          [10 7f]     stack = 127, -7, 0, 12, 0, 0, 0, 0, 3
bipush -128         [10 80]     stack = -128, 127, -7, 0, 12, 0, 0, 0, 0
dup                 [59]        stack = -128, -128, 127, -7, 0, 12, 0, 0, 0
pop                 [57]        stack = -128, 127, -7, 0, 12, 0, 0, 0, 0
pop                 [57]        stack = 127, -7, 0, 12, 0, 0, 0, 0, 3
iadd                [60]        stack = 120, 0, 12, 0, 0, 0, 0, 3
swap                [5f]        stack = 0, 120, 12, 0, 0, 0, 0, 3
pop                 [57]        stack = 120, 12, 0, 0, 0, 0, 3
iand                [7e]        stack = 8, 0, 0, 0, 0, 3
pop                 [57]        stack = 0, 0, 0, 0, 3
iinc 1, 2           [84 01 02]  stack = 0, 0, 0, 2, 3
iinc 2, -2          [84 02 fe]  stack = 0, 0, -2, 2, 3
iinc 1, -128        [84 01 80]  stack = 0, 0, -2, -126, 3
iinc 1, 127         [84 01 7f]  stack = 0, 0, -2, 1, 3
iload 0             [15 00]     stack = 3, 0, 0, -2, 1, 3
iload 12            [15 0c]     stack = 0, 3, 0, 0, -2, 1, 3
wide                [c4]        stack = 0, 3, 0, 0, -2, 1, 3
iload 1234          [15 04 d2]  stack = 0, 0, 3, 0, 0, -2, 1, 3
pop                 [57]        stack = 0, 3, 0, 0, -2, 1, 3
pop                 [57]        stack = 3, 0, 0, -2, 1, 3
istore 0            [36 00]     stack = 0, 0, -2, 1, 3
bipush 13           [10 0d]     stack = 13, 0, 0, -2, 1, 3
bipush 56           [10 38]     stack = 56, 13, 0, 0, -2, 1, 3
bipush 82           [10 52]     stack = 82, 56, 13, 0, 0, -2, 1, 3
ior                 [80]        stack = 122, 13, 0, 0, -2, 1, 3
bipush 35           [10 23]     stack = 35, 122, 13, 0, 0, -2, 1, 3
istore 12           [36 0c]     stack = 122, 13, 0, 0, -2, 1, 3
wide                [c4]        stack = 122, 13, 0, 0, -2, 1, 3
istore 1234         [36 04 d2]  stack = 13, 0, 0, -2, 1, 3
isub                [64]        stack = -13, 0, -2, 1, 3
ldc_w 0             [13 00 00]  stack = 0, -13, 0, -2, 1, 3
ldc_w 1             [13 00 01]  stack = 1234, 0, -13, 0, -2, 1, 3
ldc_w 2             [13 00 02]  stack = -1234, 1234, 0, -13, 0, -2, 1, 3
ldc_w 3             [13 00 03]  stack = -2147483648, -1234, 1234, 0, -13, 0, -2, 1, 3
ldc_w 4             [13 00 04]  stack = 2147483647, -2147483648, -1234, 1234, 0, -13, 0, -2, 1
nop                 [00]        stack = 2147483647, -2147483648, -1234, 1234, 0, -13, 0, -2, 1
pop                 [57]        stack = -2147483648, -1234, 1234, 0, -13, 0, -2, 1, 3
pop                 [57]        stack = -1234, 1234, 0, -13, 0, -2, 1, 3
pop                 [57]        stack = 1234, 0, -13, 0, -2, 1, 3
pop                 [57]        stack = 0, -13, 0, -2, 1, 3
goto 4              [a7 00 04]  stack = 0, -13, 0, -2, 1, 3
bipush 0            [10 00]     stack = 0, 0, -13, 0, -2, 1, 3
ifeq 4              [99 00 04]  stack = 0, -13, 0, -2, 1, 3
bipush 5            [10 05]     stack = 5, 0, -13, 0, -2, 1, 3
ifeq 38             [99 00 26]  stack = 0, -13, 0, -2, 1, 3
bipush 27           [10 1b]     stack = 27, 0, -13, 0, -2, 1, 3
iflt 33             [9b 00 21]  stack = 0, -13, 0, -2, 1, 3
bipush 0            [10 00]     stack = 0, 0, -13, 0, -2, 1, 3
iflt 28             [9b 00 1c]  stack = 0, -13, 0, -2, 1, 3
bipush -5           [10 fb]     stack = -5, 0, -13, 0, -2, 1, 3
iflt 5              [9b 00 05]  stack = 0, -13, 0, -2, 1, 3
bipush 5            [10 05]     stack = 5, 0, -13, 0, -2, 1, 3
bipush 7            [10 07]     stack = 7, 5, 0, -13, 0, -2, 1, 3
if_icmpeq 14        [9f 00 0e]  stack = 0, -13, 0, -2, 1, 3
bipush -8           [10 f8]     stack = -8, 0, -13, 0, -2, 1, 3
bipush -8           [10 f8]     stack = -8, -8, 0, -13, 0, -2, 1, 3
if_icmpeq 6         [9f 00 06]  stack = 0, -13, 0, -2, 1, 3
ireturn             [ac]        stack = 0
return value: 0
